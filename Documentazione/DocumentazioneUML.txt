@startuml
package Geometry <<Folder>>{

class Fracture
{
+ idFrac: int
+ numVertices: unsigned int 
+ vertices: vector<Vector3d>
+ passingTraces: vector<unsigned int>
+ notPassingTraces: vector<unsigned int>

..Non member functions ..
+ bool readFractures(string&,vector<Fracture>&,double)
+ void printLocalResults(string&,vector<Fracture>&,vector<Trace>&)

..FRACTURESTEST..
TestReadFractures

}

class Trace
{
+ idTr: unsigned int
+ extremitiesCoord: array<Vector3d,2>
+ fracturesIds: array<int,2>
+ Tips: array<bool,2>
+ length: double
+ onThePlane: array<bool,2>
+ pending: bool
+ pendingCoord: vector<vector3d>
+ pendingId: vector<unsigned int>

..Non member functions ..
+ vector<Trace> findTraces(vector<Fracture>&,double)
+ void printGlobalResults(string&,vector<Trace>&)
..TRACETEST..
TestFindTraces
}
}

package Gedim <<Frame>>{
}
note "External library" as GedimN
GedimN..Gedim

Gedim ..> Fracture::gedimInterface 

Trace "2"--o "many" Fracture : has


package Algebra <<Folder>>{
Class Algebra_functions {
+ Vector3d findPlaneEquation(vector<Vector3d>&,double&)
+ Vector3d intersectionPlaneLine(Vector3d&,double,Vector3d&,Vector3d&)
+ bool findIntersectionPoints(Fracture&,Fracture&,array<Vector3d,4>&,double,array<bool,2>&)
+ bool passBoundingBox(Fracture&,Fracture&)
+ bool findInternalPoints(array<Vector3d,4>&,double,array<Vector3d,2>&,array<bool,2>&)
+ inline bool areVectorsEqual(Vector3d&,Vector3d&,double)
+ int findSideOfTheLine(Vector3d&,Vector3d&,Vector3d&,double)
+ Vector3d IntersectionLines(array<Vector3d,2>&,array<Vector3d,2>&)

..ALGEBRATEST..
TestFindPlaneEquation
TestIntersectionPlaneLine
TestFindIntersectionPoints
TestPassBoundingBox
TestFindInternalPoints
TestFindSideOfTheLine
TestIntersectionLines
}
Algebra_functions ..> Fracture
Algebra_functions ..> PolygonalMesh

}
note "Functions with mathematical operations" as AlgebraN
AlgebraN.. Algebra_functions

package detail <<Folder>>{
Class detail_functions {
+ void merge(vector<unsigned int>&,vector<Trace>&,size_t,size_t,size_t)
+ void mergesort(vector<unsigned int>&,vector<Trace>&,size_t,size_t)
+ void mergesort(vector<unsigned int>&,vector<Trace>&)
..DETAILTEST..
TestMergeSort

}
detail_functions..> Trace
}
note "Functions to sort" as detailN
detailN.. detail_functions

package PolygonalMeshLibrary <<Folder>>{
Class PolygonalMesh{
+ numVertices: unsigned int
+ idVertices: vector<unsigned int>
+ coordVertices: vector<Vector3d>
+ numEdges: unsigned int
+ idEdges: vector<unsigned int>
+ extremitiesEdges: vector<array<unsigned int,2>>
+ numPolygons: unsigned int
+ verticesPolygons: vector<vector<unsigned int>>
+ edgesPolygons: vector<vector<unsigned int>>

..Non member functions ..
+ vector<PolygonalMesh> cutFractures(vector<Fracture>&,vector<Trace>&,double)
+ void makeCuts(queue<Vector3d>&,queue<unsigned int>&,list<reference_wrapper<Trace>>&,double,PolygonalMesh&,
unsigned int&,unsigned int&,list<Vector3d>&,list<unsigned int>&,list<array<unsigned int,2>>&,list<unsigned int>&,int,Vector3d&,map<array<unsigned int,2>,unisgned int>&)
+ void addVerticesOnThePlane(queue<Vector3d>&,queue<unsigned int>&,list<Vector3d>&,list<unsigned int>&,unsigned int&,Vector3d&,Vector3d&,Vector3d&,Vector3d&,double)
+ void printPolygonalMesh(vector<PoygonalMesh>&,string&)

..POLYGONTEST..
TestMakeCuts
TestCutFractures
TestAddVerticesOnThePlane
}
}

PolygonalMesh "1"--o "1" Fracture :cut

package Export <<Folder>>{
Class Export_functions{
+ void exportMesh(Fracture&,vector<PolygonalMesh>&)
}
Export_functions ..> Gedim
}
@enduml