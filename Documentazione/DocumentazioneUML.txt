@startuml
package Geometry <<Folder>>{

class Fracture
{
+ idFrac: unsigned int
+ numVertices: unsigned int 
+ vertices: vector<Vector3d>
+ passingTraces: vector<unsigned int>
+ notPassingTraces: vector<unsigned int>

..Non member functions ..
+ bool readFractures(string&,vector<Fracture>&,double)
+ void printLocalResults (string&,vector<Fracture>&,vector<Trace>&)

..TEST FRACTURE..
TestReadFractures
TestPrintLocalResults

}

class Trace
{
+ idTr: unsigned int
+ extremitiesCoord: array<Vector3d,2>
+ fracturesIds: array<unsigned int,2>
+ length: double
+ Tips: array<bool,2>
+ PassThrough: array<bool,2>


..Non member functions ..
+ vector<Trace> findTraces(vector<Fracture>,double)
+ void printGlobalResults (string&,vector<Trace>&)
..TEST TRACE..
NOMITEST
TestFindTraces
TestPrintGlobalResults
}
}

package Gedim <<Frame>>{
}
note "External library" as GedimN
GedimN..Gedim

Gedim ..> Fracture::gedimInterface 

Trace "2"--o "many" Fracture : has


package Algebra <<Folder>>{
Class Algebra_functions {
+ Vector3d findPlaneEquation(vector<Vector3d>&,double&)
+ Vector3d intersectionPlaneLine(Vector3d&,double,Vector3d&,Vector3d&)
+ bool findIntersectionPoints(Fracture&,Fracture&,array<Vector3d,4>&,double,array<bool,2>)
+ passBoundingBox(Fracture&,Fracture&)
+ findInternalPoints(array<Vector3d,4>&,double,array<Vector3d,2>&,array<bool,2>&)

..ALGEBRATEST..
TestFindPlaneEquation
TestIntersectionPlaneLine
TestFindIntersectionPoints
TestPassBoundingBox
TestFindInternalPoints
}
Algebra_functions ..> Fracture

}

package detail <<Folder>>{
Class detail_functions {
+ void merge(vector<unsigned int>&,vector<Trace>&,size_t,size_t,size_t)
+ void mergesort(vector<unsigned int>&,vector<Trace>&,size_t,size_t)
+ void mergesort(vector<unsigned int>&,vector<Trace>&)
..DETAILTEST..
TestMergesort

}
detail_functions..> Trace
}


@enduml